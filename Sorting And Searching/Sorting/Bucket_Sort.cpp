/*

Author : Moniruzzaman Porag
Date of Creation: 20 January 2024

           #################
           # Bucket  Sort  #
           #################
-----------------
Time Complexity:
-----------------
Best Case :  Ω(n+k)
Average Case :  θ(n+k)
Worst Case: O(n^2)

------------------
Space Complexity:
------------------
Worst Case : O(n)

Bucket sort assumes that the input is generated by a random process
that distributes elements uniformly over the interval [0,1).

*/

#include <bits/stdc++.h>
using namespace std;
void Bucket_Sort(float arr[], int n)
{

    // 1) Create n empty buckets
    vector<float> b[n];

    // 2) Put array elements
    // in different buckets
    for (int i = 0; i < n; i++)
    {

        // Index in bucket
        int bi = n * arr[i];
        b[bi].push_back(arr[i]);
    }

    // 3) Sort individual buckets
    for (int i = 0; i < n; i++)
    {
        sort(b[i].begin(), b[i].end());
    }

    // 4) Concatenate all buckets into arr[]
    int index = 0;
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < b[i].size(); j++)
        {
            arr[index++] = b[i][j];
        }
    }
}
int main()
{
    int n;
    cout << "Enter the Size of the array : ";
    cin >> n;
    float arr[n];
    cout << "Enter the elements of the array : " << endl;
    for (int i = 0; i < n; i++)
    {
        cin >> arr[i];
    }

    Bucket_Sort(arr, n);
    cout << "The array after Sorting : ";
    for (int i = 0; i < n; i++)
    {
        cout << arr[i] << " ";
    }
}